AWSTemplateFormatVersion: "2010-09-09"

Description: 'Security Stack with SSH access restrictions.'

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: 'VPC ID from Networking Stack.'

  PublicSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: 'Public Subnet ID from Networking Stack.'

  AllowedSSHIP1:
    Type: String
    Description: 'User IP address (in CIDR notation) allowed to SSH into the public EC2 instance.'
    Default: '203.0.113.0/24' #my IP, replace with your IP

  AllowedSSHIP2:
    Type: String
    Description: 'Second IP address (in CIDR notation) allowed to SSH into the public EC2 instance.'
    Default: ''

Conditions:
  HasAllowedSSHIP2:
    Fn::Not:
      - Fn::Equals:
          - !Ref AllowedSSHIP2
          - ''

Resources:
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join
            - ""
            - - !Ref VPC
              - "-public-nacl"

  InboundAllowAllNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "0"
        To: "65535"

  OutboundAllowAllNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnetNetworkAclAssociation0:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetID
      NetworkAclId: !Ref PublicNetworkAcl

  SecurityGroupPublicInstance:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow SSH from specified IPs'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref AllowedSSHIP1
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref AWS::StackName
              - '-SecurityGroup-public-instance'

  
  AdditionalSecurityGroupIngressPublicInstanceAllowedSSHIP2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasAllowedSSHIP2
    Properties:
      GroupId: !Ref SecurityGroupPublicInstance
      IpProtocol: 'tcp'
      FromPort: '22'
      ToPort: '22'
      CidrIp: !Ref AllowedSSHIP2

  SecurityGroupPrivateInstance:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Only allow SSH from public instance and all egress traffic.'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SecurityGroupPublicInstance
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref AWS::StackName
              - '-SecurityGroup-private-instance'

Outputs:
  SecurityGroupPublicInstanceId:
    Description: ID of Public Security Groups
    Value: !Ref SecurityGroupPublicInstance
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-SecurityGroupPublicInstance

  SecurityGroupPrivateInstanceId:
    Description: ID of Private Security Groups
    Value: !Ref SecurityGroupPrivateInstance
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-SecurityGroupPrivateInstance
